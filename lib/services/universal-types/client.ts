/**
 * Universal Types Service Layer - Client-side exports
 * Safe for use in browser context (no Node.js dependencies)
 */

// Type exports (these are just TypeScript types, safe for browser)
export type {
  ValidationResult,
  ValidationError,
  ValidationWarning,
  ValidationSuggestion,
  DuplicateCheckResult,
  ContentTypeDefinition,
  ConfidenceScore,
  ConfidenceThreshold
} from './validation/validator';

/**
 * Utility function for UI components to check for duplicate fields
 */
export function checkDuplicateFieldName(
  fieldName: string,
  existingFields: Array<{ name: string }>
): boolean {
  return existingFields.some(
    field => field.name.toLowerCase() === fieldName.toLowerCase()
  );
}

/**
 * Utility function to validate field name format
 */
export function validateFieldName(fieldName: string): {
  valid: boolean;
  error?: string;
} {
  if (!fieldName || fieldName.trim() === '') {
    return { valid: false, error: 'Field name is required' };
  }
  
  // Allow both user-created names (camelCase) and auto-generated names (field_timestamp)
  const isValidUserName = /^[a-z][a-zA-Z0-9]*$/.test(fieldName);
  const isAutoGenerated = /^field_\d+(_[a-z0-9]+)?$/.test(fieldName);
  
  if (!isValidUserName && !isAutoGenerated) {
    return { 
      valid: false, 
      error: 'Field name must start with lowercase letter and contain only alphanumeric characters' 
    };
  }
  
  // Check for reserved field names
  const reservedFieldNames = ['id', '_id', '__v', 'createdAt', 'updatedAt', 'deletedAt'];
  if (reservedFieldNames.includes(fieldName)) {
    return { valid: false, error: `"${fieldName}" is a reserved field name` };
  }
  
  return { valid: true };
}

/**
 * Utility function to validate content type name format
 */
export function validateContentTypeName(typeName: string): {
  valid: boolean;
  error?: string;
} {
  if (!typeName || typeName.trim() === '') {
    return { valid: false, error: 'Type name is required' };
  }
  
  if (!/^[A-Z][a-zA-Z0-9]*$/.test(typeName)) {
    return { 
      valid: false, 
      error: 'Type name must be in PascalCase (e.g., BlogPost)' 
    };
  }
  
  if (typeName.length > 50) {
    return { 
      valid: false, 
      error: 'Type name is too long (max 50 characters)' 
    };
  }
  
  return { valid: true };
}

/**
 * Quick validation for UI components
 */
export function validateContentTypeField(
  fieldName: string,
  fieldType: string,
  existingFields: Array<{ name: string }>
): { valid: boolean; errors: string[] } {
  const errors: string[] = [];
  
  // Check field name format
  const nameValidation = validateFieldName(fieldName);
  if (!nameValidation.valid && nameValidation.error) {
    errors.push(nameValidation.error);
  }
  
  // Check for duplicates
  if (checkDuplicateFieldName(fieldName, existingFields)) {
    errors.push(`Field "${fieldName}" already exists`);
  }
  
  // For client-side, we'll just check against common types
  const validTypes = [
    'text', 'textarea', 'richtext', 'number', 'boolean', 
    'date', 'image', 'richText', 'reference', 'select', 
    'gallery', 'tags', 'json', 'url'
  ];
  
  if (!validTypes.includes(fieldType.toLowerCase())) {
    errors.push(`Invalid field type "${fieldType}"`);
  }
  
  return {
    valid: errors.length === 0,
    errors
  };
}