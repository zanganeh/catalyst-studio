/**
 * Universal Type Validation Services
 * Reusable validation logic for both AI and UI components
 */

export { 
  contentTypeValidator,
  type ValidationResult,
  type ValidationError,
  type ValidationWarning,
  type ValidationSuggestion,
  type DuplicateCheckResult,
  type ContentTypeDefinition
} from './validator';

export {
  confidenceScorer,
  type ConfidenceScore,
  type ConfidenceThreshold
} from './confidence-scorer';

/**
 * Utility function for UI components to check for duplicate fields
 */
export function checkDuplicateFieldName(
  fieldName: string,
  existingFields: Array<{ name: string }>
): boolean {
  return existingFields.some(
    field => field.name.toLowerCase() === fieldName.toLowerCase()
  );
}

/**
 * Utility function to validate field name format
 */
export function validateFieldName(fieldName: string): {
  valid: boolean;
  error?: string;
} {
  if (!fieldName || fieldName.trim() === '') {
    return { valid: false, error: 'Field name is required' };
  }
  
  // Allow both user-created names (camelCase) and auto-generated names (field_timestamp)
  const isValidUserName = /^[a-z][a-zA-Z0-9]*$/.test(fieldName);
  const isAutoGenerated = /^field_\d+(_[a-z0-9]+)?$/.test(fieldName);
  
  if (!isValidUserName && !isAutoGenerated) {
    return { 
      valid: false, 
      error: 'Field name must start with lowercase letter and contain only alphanumeric characters' 
    };
  }
  
  // Check for reserved field names
  const reservedFieldNames = ['id', '_id', '__v', 'createdAt', 'updatedAt', 'deletedAt'];
  if (reservedFieldNames.includes(fieldName)) {
    return { valid: false, error: `"${fieldName}" is a reserved field name` };
  }
  
  return { valid: true };
}

/**
 * Utility function to validate content type name format
 */
export function validateContentTypeName(typeName: string): {
  valid: boolean;
  error?: string;
} {
  if (!typeName || typeName.trim() === '') {
    return { valid: false, error: 'Type name is required' };
  }
  
  if (!/^[A-Z][a-zA-Z0-9]*$/.test(typeName)) {
    return { 
      valid: false, 
      error: 'Type name must be in PascalCase (e.g., BlogPost)' 
    };
  }
  
  if (typeName.length > 50) {
    return { 
      valid: false, 
      error: 'Type name is too long (max 50 characters)' 
    };
  }
  
  return { valid: true };
}