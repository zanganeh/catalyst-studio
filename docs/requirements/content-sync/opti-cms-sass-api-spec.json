{
    "openapi": "3.0.1",
    "info": {
        "title": "Optimizely CMS Content API Preview 3",
        "version": "preview3"
    },
    "servers": [
        {
            "url": "https://api.cms.optimizely.com/preview3",
            "description": "Optimizely CMS API for Preview3"
        }
    ],
    "paths": {
        "/experimental/changesets": {
            "get": {
                "tags": [
                    "Changesets"
                ],
                "summary": "List changeset",
                "description": "Lists all changeset using the provided options. This API is experimental and may change in future releases.",
                "operationId": "Changesets_List",
                "parameters": [
                    {
                        "name": "sources",
                        "in": "query",
                        "description": "Indicates which sources should be included when listing changesets.\r\nUse Default to include changesets without a specific sources.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "pageIndex",
                        "in": "query",
                        "schema": {
                            "maximum": 10000,
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "schema": {
                            "maximum": 10000,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChangesetPage"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Changesets"
                ],
                "summary": "Create changeset",
                "description": "Creates a new changeset. This API is experimental and may change in future releases.",
                "operationId": "Changesets_Create",
                "requestBody": {
                    "description": "The changeset that should be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Changeset"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "headers": {
                            "ETag": {
                                "description": "The RFC7232 ETag header field in a response provides the current entity-tag for the resource. An entity-tag is an opaque identifier for different versions of a resource over time, regardless whether multiple versions are valid at the same time.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Last-Modified": {
                                "description": "The date and time at which the resource was last modified.",
                                "schema": {
                                    "type": "string",
                                    "format": "http-date"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Changeset"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/experimental/changesets/{key}": {
            "get": {
                "tags": [
                    "Changesets"
                ],
                "summary": "Get changeset",
                "description": "Gets the changeset with the provided key. This API is experimental and may change in future releases.",
                "operationId": "Changesets_Get",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "description": "The key of the changeset to retrieve.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "If-None-Match",
                        "in": "header",
                        "description": "If provided and the value matches the RFC7232 ETag of the current resource a 304 NotModified response will be returned. Weak ETags will always be ignored.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "If-Modified-Since",
                        "in": "header",
                        "description": "If provided and the resource has not been modified since the date a 304 NotModified response will be returned. This parameter will be ignored if an 'If-None-Match' parameter is also provided.",
                        "schema": {
                            "type": "string",
                            "format": "http-date"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                            "ETag": {
                                "description": "The RFC7232 ETag header field in a response provides the current entity-tag for the resource. An entity-tag is an opaque identifier for different versions of a resource over time, regardless whether multiple versions are valid at the same time.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Last-Modified": {
                                "description": "The date and time at which the resource was last modified.",
                                "schema": {
                                    "type": "string",
                                    "format": "http-date"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Changeset"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not Modified",
                        "headers": {
                            "ETag": {
                                "description": "The RFC7232 ETag header field in a response provides the current entity-tag for the resource. An entity-tag is an opaque identifier for different versions of a resource over time, regardless whether multiple versions are valid at the same time.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Last-Modified": {
                                "description": "The date and time at which the resource was last modified.",
                                "schema": {
                                    "type": "string",
                                    "format": "http-date"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Changesets"
                ],
                "summary": "Delete changeset",
                "description": "Deletes the changeset with the provided key. If a changeset with the provided key does not exist an error is returned. This API is experimental and may change in future releases.",
                "operationId": "Changesets_Delete",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "description": "The key of the changeset to delete.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Changeset"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Changesets"
                ],
                "summary": "Patch changeset",
                "description": "Patch an existing changeset. This API is experimental and may change in future releases.",
                "operationId": "Changesets_Patch",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "description": "The key of the changeset to patch.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The values of the changeset that should be patched formatted according to RFC7396.",
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/Changeset"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                            "ETag": {
                                "description": "The RFC7232 ETag header field in a response provides the current entity-tag for the resource. An entity-tag is an opaque identifier for different versions of a resource over time, regardless whether multiple versions are valid at the same time.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Last-Modified": {
                                "description": "The date and time at which the resource was last modified.",
                                "schema": {
                                    "type": "string",
                                    "format": "http-date"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Changeset"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/experimental/changesets/{changeset}/items/{key}/versions/{version}": {
            "get": {
                "tags": [
                    "Changesets"
                ],
                "summary": "Get changeset item",
                "description": "Gets the changeset item for the specified content reference. This API is experimental and may change in future releases.",
                "operationId": "Changesets_GetItem",
                "parameters": [
                    {
                        "name": "changeset",
                        "in": "path",
                        "description": "The changeset key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "The content key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "The content version",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChangesetItem"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Changesets"
                ],
                "summary": "Patch changeset item",
                "description": "Patch the given changeset item. This API is experimental and may change in future releases.",
                "operationId": "Changesets_PatchItem",
                "parameters": [
                    {
                        "name": "changeset",
                        "in": "path",
                        "description": "The changeset key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "The content key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "The content version",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The values of the changeset item that should be patched formatted according to RFC7396.",
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChangesetItem"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChangesetItem"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Changesets"
                ],
                "summary": "Delete changeset item",
                "description": "Deletes the specified changeset item from the changeset. This API is experimental and may change in future releases.",
                "operationId": "Changesets_DeleteItem",
                "parameters": [
                    {
                        "name": "changeset",
                        "in": "path",
                        "description": "The changeset key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "The content key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "The content version",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChangesetItem"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/experimental/changesets/{changeset}/items": {
            "get": {
                "tags": [
                    "Changesets"
                ],
                "summary": "List changeset items",
                "description": "Lists the available changeset items for the specified changeset using\r\nthe provided options. This API is experimental and may change in future releases.",
                "operationId": "Changesets_ListItems",
                "parameters": [
                    {
                        "name": "changeset",
                        "in": "path",
                        "description": "The changeset key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageIndex",
                        "in": "query",
                        "schema": {
                            "maximum": 10000,
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "schema": {
                            "maximum": 10000,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChangesetItemPage"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Changesets"
                ],
                "summary": "Create changeset item",
                "description": "Creates the given changeset item. This API is experimental and may change in future releases.",
                "operationId": "Changesets_CreateItem",
                "parameters": [
                    {
                        "name": "changeset",
                        "in": "path",
                        "description": "The changeset key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The changeset item",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChangesetItem"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChangesetItem"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/experimental/content": {
            "post": {
                "tags": [
                    "Content"
                ],
                "summary": "Create content",
                "description": "Create a new content item. This API is experimental and may change in future releases.",
                "operationId": "Content_Create",
                "parameters": [
                    {
                        "name": "cms-skip-validation",
                        "in": "header",
                        "description": "Indicates that the content validation should be ignored.",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The content item that should be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ContentItem"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/vnd.optimizely.cms.v1.includeSchema+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentItemWithContentTypes"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentItem"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/experimental/content/{key}": {
            "get": {
                "tags": [
                    "Content"
                ],
                "summary": "Get content",
                "description": "Get shared metadata about the content instance with the provided key. This API is experimental and may change in future releases.",
                "operationId": "Content_GetMetadata",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "description": "The key of the content to retrieve metadata for.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "allowDeleted",
                        "in": "query",
                        "description": "Indicates that metadata for a deleted content may be returned.",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentMetadata"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Content"
                ],
                "summary": "Patch content",
                "description": "Patch an existing content item. If a content item with the provided key does not exist an error is returned. This API is experimental and may change in future releases.",
                "operationId": "Content_PatchMetadata",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "description": "The key of the content item to patch.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The values of the content item that should be patched.",
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/ContentMetadata"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentMetadata"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Content"
                ],
                "summary": "Delete content",
                "description": "Deletes the content item with the provided key. If a content item with the provided key does not exist an error is returned. This API is experimental and may change in future releases.",
                "operationId": "Content_Delete",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "description": "The key of the content item to delete.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cms-permanent-delete",
                        "in": "header",
                        "description": "Indicates that the content item should be permanently deleted immediately or if it should be soft deleted first.",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentMetadata"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/experimental/content/{key}/path": {
            "get": {
                "tags": [
                    "Content"
                ],
                "summary": "Get content path",
                "description": "Get the content path with the provided key. This API is experimental and may change in future releases.",
                "operationId": "Content_GetPath",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "description": "The key of the content path to retrieve.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageIndex",
                        "in": "query",
                        "schema": {
                            "maximum": 10000,
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "schema": {
                            "maximum": 10000,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentMetadataPage"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/experimental/content/{key}/items": {
            "get": {
                "tags": [
                    "Content"
                ],
                "summary": "List content in container",
                "description": "List the content items located in a specific container. This API is experimental and may change in future releases.",
                "operationId": "Content_ListItems",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "description": "The key of the content to retrieve items for.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "contentTypes",
                        "in": "query",
                        "description": "Indicates which content types or base types to include in the list.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "pageIndex",
                        "in": "query",
                        "schema": {
                            "maximum": 10000,
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "schema": {
                            "maximum": 10000,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentMetadataPage"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/experimental/content/{key}/assets": {
            "get": {
                "tags": [
                    "Content"
                ],
                "summary": "List assets",
                "description": "List the assets that belongs to a content instance. This API is experimental and may change in future releases.",
                "operationId": "Content_ListAssets",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "description": "The key of the content to retrieve assets for.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "contentTypes",
                        "in": "query",
                        "description": "Indicates which content types or base types to include in the list.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "pageIndex",
                        "in": "query",
                        "schema": {
                            "maximum": 10000,
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "schema": {
                            "maximum": 10000,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentMetadataPage"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/experimental/content/{key}:copy": {
            "post": {
                "tags": [
                    "Content"
                ],
                "summary": "Copy content",
                "description": "Create a copy of the content item with the provided key. This API is experimental and may change in future releases.",
                "operationId": "Content_Copy",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "description": "The key of the content item to copy.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Optional instructions for how to copy content.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CopyContentOptions"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentMetadata"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/experimental/content/{key}:undelete": {
            "post": {
                "tags": [
                    "Content"
                ],
                "summary": "Restore content",
                "description": "Restore the deleted content item with the provided key. If a content item with the provided key is not deleted an error is returned. This API is experimental and may change in future releases.",
                "operationId": "Content_Undelete",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "description": "The key of the content item to undelete.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentMetadata"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/experimental/content/versions": {
            "get": {
                "tags": [
                    "Content"
                ],
                "summary": "Query versions",
                "description": "List content versions based on the provided query options. This API is experimental and may change in future releases.",
                "operationId": "Content_ListAllVersions",
                "parameters": [
                    {
                        "name": "locales",
                        "in": "query",
                        "description": "Indicates which content locales that should be listed. Use 'NEUTRAL' to include locale-neutral content.\r\nLocale must be a valid IETF BCP-47 language tag.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "statuses",
                        "in": "query",
                        "description": "Indicates which status content versions must have to be listed.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "draft",
                                    "ready",
                                    "published",
                                    "previous",
                                    "scheduled",
                                    "rejected",
                                    "inReview"
                                ],
                                "type": "string",
                                "description": "Represent the different status values of a content version."
                            }
                        }
                    },
                    {
                        "name": "pageIndex",
                        "in": "query",
                        "schema": {
                            "maximum": 10000,
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "schema": {
                            "maximum": 10000,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/vnd.optimizely.cms.v1.includeSchema+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentItemListWithContentTypes"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentItemPage"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/experimental/content/{key}/versions": {
            "get": {
                "tags": [
                    "Content"
                ],
                "summary": "List versions",
                "description": "List versions of the content item with the provided key and the provided options. This API is experimental and may change in future releases.",
                "operationId": "Content_ListVersions",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "locales",
                        "in": "query",
                        "description": "Indicates which content locales that should be listed. Use 'NEUTRAL' to include locale-neutral content.\r\nLocale must be a valid IETF BCP-47 language tag.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "statuses",
                        "in": "query",
                        "description": "Indicates which status content versions must have to be listed.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "draft",
                                    "ready",
                                    "published",
                                    "previous",
                                    "scheduled",
                                    "rejected",
                                    "inReview"
                                ],
                                "type": "string",
                                "description": "Represent the different status values of a content version."
                            }
                        }
                    },
                    {
                        "name": "pageIndex",
                        "in": "query",
                        "schema": {
                            "maximum": 10000,
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "schema": {
                            "maximum": 10000,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/vnd.optimizely.cms.v1.includeSchema+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentItemListWithContentTypes"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentItemPage"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Content"
                ],
                "summary": "Create version",
                "description": "Create a new version of a content item. This API is experimental and may change in future releases.",
                "operationId": "Content_CreateVersion",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "description": "The key of the content item for which a new content version should be created.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cms-skip-validation",
                        "in": "header",
                        "description": "Indicates that the content validation should be ignored.",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The content version that should be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ContentItem"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/vnd.optimizely.cms.v1.includeSchema+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentItemWithContentTypes"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentItem"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Content"
                ],
                "summary": "Delete locale",
                "description": "Deletes the content item with the provided key. If a content item with the provided key does not exist an error is returned. This API is experimental and may change in future releases.",
                "operationId": "Content_DeleteLocale",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "locale",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/vnd.optimizely.cms.v1.includeSchema+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentItemWithContentTypes"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentItem"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/experimental/content/{key}/versions/{version}": {
            "get": {
                "tags": [
                    "Content"
                ],
                "summary": "Get version",
                "description": "Get the content item with the provided key and version. This API is experimental and may change in future releases.",
                "operationId": "Content_GetVersion",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "locale",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "If-None-Match",
                        "in": "header",
                        "description": "If provided and the value matches the RFC7232 ETag of the current resource a 304 NotModified response will be returned. Weak ETags will always be ignored.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "If-Modified-Since",
                        "in": "header",
                        "description": "If provided and the resource has not been modified since the date a 304 NotModified response will be returned. This parameter will be ignored if an 'If-None-Match' parameter is also provided.",
                        "schema": {
                            "type": "string",
                            "format": "http-date"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                            "ETag": {
                                "description": "The RFC7232 ETag header field in a response provides the current entity-tag for the resource. An entity-tag is an opaque identifier for different versions of a resource over time, regardless whether multiple versions are valid at the same time.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Last-Modified": {
                                "description": "The date and time at which the resource was last modified.",
                                "schema": {
                                    "type": "string",
                                    "format": "http-date"
                                }
                            }
                        },
                        "content": {
                            "application/vnd.optimizely.cms.v1.includeSchema+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentItemWithContentTypes"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentItem"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not Modified",
                        "headers": {
                            "ETag": {
                                "description": "The RFC7232 ETag header field in a response provides the current entity-tag for the resource. An entity-tag is an opaque identifier for different versions of a resource over time, regardless whether multiple versions are valid at the same time.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Last-Modified": {
                                "description": "The date and time at which the resource was last modified.",
                                "schema": {
                                    "type": "string",
                                    "format": "http-date"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Content"
                ],
                "summary": "Patch version",
                "description": "Patch an existing content item. If a content item with the provided key does not exist an error is returned. This API is experimental and may change in future releases.",
                "operationId": "Content_PatchVersion",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "description": "The key of the content item that should be patched.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "The version of the content that should be patched.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "locale",
                        "in": "query",
                        "description": "The locale of the content that should be patched.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cms-skip-validation",
                        "in": "header",
                        "description": "Indicates that the content validation should be ignored.",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The content information that should be patched.",
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/ContentItem"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/vnd.optimizely.cms.v1.includeSchema+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentItemWithContentTypes"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentItem"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Content"
                ],
                "summary": "Delete version",
                "description": "Deletes the content item with the provided key. If a content item with the provided key does not exist an error is returned. This API is experimental and may change in future releases.",
                "operationId": "Content_DeleteVersion",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/vnd.optimizely.cms.v1.includeSchema+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentItemWithContentTypes"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentItem"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/contenttypes": {
            "get": {
                "tags": [
                    "ContentTypes"
                ],
                "summary": "List content types",
                "description": "List content types using the provided parameters.",
                "operationId": "ContentTypes_List",
                "parameters": [
                    {
                        "name": "forContainerType",
                        "in": "query",
                        "description": "Only include types that are available for creation under the provided container type",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sources",
                        "in": "query",
                        "description": "Indicates which sources should be included when listing content types.\r\nUse 'DEFAULT' to include content types without a specific source.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "pageIndex",
                        "in": "query",
                        "schema": {
                            "maximum": 10000,
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "schema": {
                            "maximum": 10000,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentTypePage"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "ContentTypes"
                ],
                "summary": "Create content type",
                "description": "Create a new content type.",
                "operationId": "ContentTypes_Create",
                "requestBody": {
                    "description": "The content type that should be created or replaced.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ContentType"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "headers": {
                            "ETag": {
                                "description": "The RFC7232 ETag header field in a response provides the current entity-tag for the resource. An entity-tag is an opaque identifier for different versions of a resource over time, regardless whether multiple versions are valid at the same time.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Last-Modified": {
                                "description": "The date and time at which the resource was last modified.",
                                "schema": {
                                    "type": "string",
                                    "format": "http-date"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentType"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/contenttypes/{key}": {
            "get": {
                "tags": [
                    "ContentTypes"
                ],
                "summary": "Get content type",
                "description": "Get the content type with the provided key.",
                "operationId": "ContentTypes_Get",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "description": "The key of the content type to retrieve.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "If-None-Match",
                        "in": "header",
                        "description": "If provided and the value matches the RFC7232 ETag of the current resource a 304 NotModified response will be returned. Weak ETags will always be ignored.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "If-Modified-Since",
                        "in": "header",
                        "description": "If provided and the resource has not been modified since the date a 304 NotModified response will be returned. This parameter will be ignored if an 'If-None-Match' parameter is also provided.",
                        "schema": {
                            "type": "string",
                            "format": "http-date"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                            "ETag": {
                                "description": "The RFC7232 ETag header field in a response provides the current entity-tag for the resource. An entity-tag is an opaque identifier for different versions of a resource over time, regardless whether multiple versions are valid at the same time.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Last-Modified": {
                                "description": "The date and time at which the resource was last modified.",
                                "schema": {
                                    "type": "string",
                                    "format": "http-date"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentType"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not Modified",
                        "headers": {
                            "ETag": {
                                "description": "The RFC7232 ETag header field in a response provides the current entity-tag for the resource. An entity-tag is an opaque identifier for different versions of a resource over time, regardless whether multiple versions are valid at the same time.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Last-Modified": {
                                "description": "The date and time at which the resource was last modified.",
                                "schema": {
                                    "type": "string",
                                    "format": "http-date"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "ContentTypes"
                ],
                "summary": "Patch content type",
                "description": "Patch an existing content type. If a content type with the provided key does not exist an error is returned.",
                "operationId": "ContentTypes_Patch",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "description": "The key of the content type to patch.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cms-ignore-data-loss-warnings",
                        "in": "header",
                        "description": "Patch the content type even though the changes might result in data loss.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "If-Match",
                        "in": "header",
                        "description": "If provided, the PATCH request will only be considered if the value matches the RFC7232 ETag of the current resource. Weak ETags will always be ignored.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "If-Unmodified-Since",
                        "in": "header",
                        "description": "If provided, the PATCH request will only be considered if the resource has not been modified since the provided date. This parameter will be ignored if an 'If-Match' parameter is also provided.",
                        "schema": {
                            "type": "string",
                            "format": "http-date"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The values of the content type that should be patched formatted according to RFC7396.",
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/ContentType"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                            "ETag": {
                                "description": "The RFC7232 ETag header field in a response provides the current entity-tag for the resource. An entity-tag is an opaque identifier for different versions of a resource over time, regardless whether multiple versions are valid at the same time.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Last-Modified": {
                                "description": "The date and time at which the resource was last modified.",
                                "schema": {
                                    "type": "string",
                                    "format": "http-date"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentType"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "412": {
                        "description": "Precondition Failed",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "ContentTypes"
                ],
                "summary": "Delete content type",
                "description": "Deletes the content type with the provided key. If a content type with the provided key does not exist an error is returned.",
                "operationId": "ContentTypes_Delete",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "description": "The key of the content type to delete.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "If-Match",
                        "in": "header",
                        "description": "If provided, the DELETE request will only be considered if the value matches the RFC7232 ETag of the current resource. Weak ETags will always be ignored.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "If-Unmodified-Since",
                        "in": "header",
                        "description": "If provided, the DELETE request will only be considered if the resource has not been modified since the provided date. This parameter will be ignored if an 'If-Match' parameter is also provided.",
                        "schema": {
                            "type": "string",
                            "format": "http-date"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentType"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "412": {
                        "description": "Precondition Failed",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/displaytemplates": {
            "get": {
                "tags": [
                    "DisplayTemplates"
                ],
                "summary": "List display templates",
                "description": "List display templates using the provided parameters.",
                "operationId": "DisplayTemplates_List",
                "parameters": [
                    {
                        "name": "pageIndex",
                        "in": "query",
                        "schema": {
                            "maximum": 10000,
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "schema": {
                            "maximum": 10000,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DisplayTemplatePage"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "DisplayTemplates"
                ],
                "summary": "Create display template",
                "description": "Create a new display template.",
                "operationId": "DisplayTemplates_Create",
                "requestBody": {
                    "description": "The display template that should be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DisplayTemplate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "headers": {
                            "ETag": {
                                "description": "The RFC7232 ETag header field in a response provides the current entity-tag for the resource. An entity-tag is an opaque identifier for different versions of a resource over time, regardless whether multiple versions are valid at the same time.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Last-Modified": {
                                "description": "The date and time at which the resource was last modified.",
                                "schema": {
                                    "type": "string",
                                    "format": "http-date"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DisplayTemplate"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/displaytemplates/{key}": {
            "get": {
                "tags": [
                    "DisplayTemplates"
                ],
                "summary": "Get display template",
                "description": "Get the display template with the provided key.",
                "operationId": "DisplayTemplates_Get",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "description": "The key of the display template to retrieve.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "If-None-Match",
                        "in": "header",
                        "description": "If provided and the value matches the RFC7232 ETag of the current resource a 304 NotModified response will be returned. Weak ETags will always be ignored.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "If-Modified-Since",
                        "in": "header",
                        "description": "If provided and the resource has not been modified since the date a 304 NotModified response will be returned. This parameter will be ignored if an 'If-None-Match' parameter is also provided.",
                        "schema": {
                            "type": "string",
                            "format": "http-date"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                            "ETag": {
                                "description": "The RFC7232 ETag header field in a response provides the current entity-tag for the resource. An entity-tag is an opaque identifier for different versions of a resource over time, regardless whether multiple versions are valid at the same time.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Last-Modified": {
                                "description": "The date and time at which the resource was last modified.",
                                "schema": {
                                    "type": "string",
                                    "format": "http-date"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DisplayTemplate"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not Modified",
                        "headers": {
                            "ETag": {
                                "description": "The RFC7232 ETag header field in a response provides the current entity-tag for the resource. An entity-tag is an opaque identifier for different versions of a resource over time, regardless whether multiple versions are valid at the same time.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Last-Modified": {
                                "description": "The date and time at which the resource was last modified.",
                                "schema": {
                                    "type": "string",
                                    "format": "http-date"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "DisplayTemplates"
                ],
                "summary": "Patch display template",
                "description": "Patch an existing display template.",
                "operationId": "DisplayTemplates_Patch",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "description": "The key of the display template to patch.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "If-Match",
                        "in": "header",
                        "description": "If provided, the PATCH request will only be considered if the value matches the RFC7232 ETag of the current resource. Weak ETags will always be ignored.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "If-Unmodified-Since",
                        "in": "header",
                        "description": "If provided, the PATCH request will only be considered if the resource has not been modified since the provided date. This parameter will be ignored if an 'If-Match' parameter is also provided.",
                        "schema": {
                            "type": "string",
                            "format": "http-date"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The values of the display template that should be patched formatted according to RFC7396.",
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/DisplayTemplate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                            "ETag": {
                                "description": "The RFC7232 ETag header field in a response provides the current entity-tag for the resource. An entity-tag is an opaque identifier for different versions of a resource over time, regardless whether multiple versions are valid at the same time.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Last-Modified": {
                                "description": "The date and time at which the resource was last modified.",
                                "schema": {
                                    "type": "string",
                                    "format": "http-date"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DisplayTemplate"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "412": {
                        "description": "Precondition Failed",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "DisplayTemplates"
                ],
                "summary": "Delete display template",
                "description": "Deletes the display template with the provided key.",
                "operationId": "DisplayTemplates_Delete",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "description": "The key of the display template to delete.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "If-Match",
                        "in": "header",
                        "description": "If provided, the DELETE request will only be considered if the value matches the RFC7232 ETag of the current resource. Weak ETags will always be ignored.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "If-Unmodified-Since",
                        "in": "header",
                        "description": "If provided, the DELETE request will only be considered if the resource has not been modified since the provided date. This parameter will be ignored if an 'If-Match' parameter is also provided.",
                        "schema": {
                            "type": "string",
                            "format": "http-date"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DisplayTemplate"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "412": {
                        "description": "Precondition Failed",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/propertyformats": {
            "get": {
                "tags": [
                    "PropertyFormats"
                ],
                "summary": "List property formats",
                "description": "List all property formats using the provided options.",
                "operationId": "PropertyFormats_List",
                "parameters": [
                    {
                        "name": "pageIndex",
                        "in": "query",
                        "schema": {
                            "maximum": 10000,
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "schema": {
                            "maximum": 10000,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PropertyFormatPage"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/propertyformats/{key}": {
            "get": {
                "tags": [
                    "PropertyFormats"
                ],
                "summary": "Get property format",
                "description": "Get the property format with the provided key.",
                "operationId": "PropertyFormats_Get",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "description": "The key of the property format to retrieve.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "allowDeleted",
                        "in": "query",
                        "description": "Indicates that a deleted property format may be returned.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "If-None-Match",
                        "in": "header",
                        "description": "If provided and the value matches the RFC7232 ETag of the current resource a 304 NotModified response will be returned. Weak ETags will always be ignored.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "If-Modified-Since",
                        "in": "header",
                        "description": "If provided and the resource has not been modified since the date a 304 NotModified response will be returned. This parameter will be ignored if an 'If-None-Match' parameter is also provided.",
                        "schema": {
                            "type": "string",
                            "format": "http-date"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                            "ETag": {
                                "description": "The RFC7232 ETag header field in a response provides the current entity-tag for the resource. An entity-tag is an opaque identifier for different versions of a resource over time, regardless whether multiple versions are valid at the same time.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Last-Modified": {
                                "description": "The date and time at which the resource was last modified.",
                                "schema": {
                                    "type": "string",
                                    "format": "http-date"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PropertyFormat"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not Modified",
                        "headers": {
                            "ETag": {
                                "description": "The RFC7232 ETag header field in a response provides the current entity-tag for the resource. An entity-tag is an opaque identifier for different versions of a resource over time, regardless whether multiple versions are valid at the same time.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Last-Modified": {
                                "description": "The date and time at which the resource was last modified.",
                                "schema": {
                                    "type": "string",
                                    "format": "http-date"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/propertygroups": {
            "get": {
                "tags": [
                    "PropertyGroups"
                ],
                "summary": "List property groups",
                "description": "List property groups using the provided options.",
                "operationId": "PropertyGroups_List",
                "parameters": [
                    {
                        "name": "sources",
                        "in": "query",
                        "description": "Indicates which property groups sources should be listed.\r\nUse 'DEFAULT' to include groups without a specific sources.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PropertyGroupPage"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "PropertyGroups"
                ],
                "summary": "Create property group",
                "description": "Create a new property group.",
                "operationId": "PropertyGroups_Create",
                "requestBody": {
                    "description": "The property group that should be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PropertyGroup"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "headers": {
                            "ETag": {
                                "description": "The RFC7232 ETag header field in a response provides the current entity-tag for the resource. An entity-tag is an opaque identifier for different versions of a resource over time, regardless whether multiple versions are valid at the same time.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Last-Modified": {
                                "description": "The date and time at which the resource was last modified.",
                                "schema": {
                                    "type": "string",
                                    "format": "http-date"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PropertyGroup"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/propertygroups/{key}": {
            "get": {
                "tags": [
                    "PropertyGroups"
                ],
                "summary": "Get property group",
                "description": "Get the property group with the provided key.",
                "operationId": "PropertyGroups_Get",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "description": "The key of the property group to retrieve.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "If-None-Match",
                        "in": "header",
                        "description": "If provided and the value matches the RFC7232 ETag of the current resource a 304 NotModified response will be returned. Weak ETags will always be ignored.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "If-Modified-Since",
                        "in": "header",
                        "description": "If provided and the resource has not been modified since the date a 304 NotModified response will be returned. This parameter will be ignored if an 'If-None-Match' parameter is also provided.",
                        "schema": {
                            "type": "string",
                            "format": "http-date"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                            "ETag": {
                                "description": "The RFC7232 ETag header field in a response provides the current entity-tag for the resource. An entity-tag is an opaque identifier for different versions of a resource over time, regardless whether multiple versions are valid at the same time.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Last-Modified": {
                                "description": "The date and time at which the resource was last modified.",
                                "schema": {
                                    "type": "string",
                                    "format": "http-date"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PropertyGroup"
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "Not Modified",
                        "headers": {
                            "ETag": {
                                "description": "The RFC7232 ETag header field in a response provides the current entity-tag for the resource. An entity-tag is an opaque identifier for different versions of a resource over time, regardless whether multiple versions are valid at the same time.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Last-Modified": {
                                "description": "The date and time at which the resource was last modified.",
                                "schema": {
                                    "type": "string",
                                    "format": "http-date"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "PropertyGroups"
                ],
                "summary": "Patch property group",
                "description": "Patch an existing property group.",
                "operationId": "PropertyGroups_Patch",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "description": "The key of the property group to patch.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "If-Match",
                        "in": "header",
                        "description": "If provided, the PATCH request will only be considered if the value matches the RFC7232 ETag of the current resource. Weak ETags will always be ignored.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "If-Unmodified-Since",
                        "in": "header",
                        "description": "If provided, the PATCH request will only be considered if the resource has not been modified since the provided date. This parameter will be ignored if an 'If-Match' parameter is also provided.",
                        "schema": {
                            "type": "string",
                            "format": "http-date"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The values of the property group that should be patched formatted according to RFC7396.",
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/PropertyGroup"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                            "ETag": {
                                "description": "The RFC7232 ETag header field in a response provides the current entity-tag for the resource. An entity-tag is an opaque identifier for different versions of a resource over time, regardless whether multiple versions are valid at the same time.",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Last-Modified": {
                                "description": "The date and time at which the resource was last modified.",
                                "schema": {
                                    "type": "string",
                                    "format": "http-date"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PropertyGroup"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "412": {
                        "description": "Precondition Failed",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "PropertyGroups"
                ],
                "summary": "Delete property group",
                "description": "Deletes the property group with the provided key.",
                "operationId": "PropertyGroups_Delete",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "description": "The key of the property group to delete.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "If-Match",
                        "in": "header",
                        "description": "If provided, the DELETE request will only be considered if the value matches the RFC7232 ETag of the current resource. Weak ETags will always be ignored.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "If-Unmodified-Since",
                        "in": "header",
                        "description": "If provided, the DELETE request will only be considered if the resource has not been modified since the provided date. This parameter will be ignored if an 'If-Match' parameter is also provided.",
                        "schema": {
                            "type": "string",
                            "format": "http-date"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PropertyGroup"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "412": {
                        "description": "Precondition Failed",
                        "content": {
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "ArrayItem": {
                "type": "object",
                "properties": {
                    "type": {
                        "maxLength": 50,
                        "enum": [
                            "string",
                            "url",
                            "boolean",
                            "integer",
                            "float",
                            "dateTime",
                            "contentReference",
                            "content",
                            "binary",
                            "link",
                            "richText",
                            "json",
                            "component"
                        ],
                        "type": "string",
                        "description": "Gets the data type for the list item property."
                    },
                    "format": {
                        "type": "string",
                        "description": "The key of the PropertyFormat that this property item is an instance of.",
                        "nullable": true
                    },
                    "contentType": {
                        "maxLength": 255,
                        "minLength": 2,
                        "pattern": "^[_A-Za-z][:_0-9A-Za-z]+\\z",
                        "type": "string",
                        "description": "The key of the content type that a property with 'type': 'component' may contain.",
                        "nullable": true
                    },
                    "minimum": {
                        "oneOf": [
                            {
                                "type": "integer",
                                "format": "int32",
                                "nullable": true
                            },
                            {
                                "type": "number",
                                "format": "double",
                                "nullable": true
                            },
                            {
                                "type": "string",
                                "nullable": true
                            },
                            {
                                "type": "string",
                                "format": "date-time",
                                "nullable": true
                            }
                        ],
                        "description": "The minimum value that properties of this type should be able to contain. Value type must match the type of the array item.",
                        "nullable": true
                    },
                    "maximum": {
                        "oneOf": [
                            {
                                "type": "integer",
                                "format": "int32",
                                "nullable": true
                            },
                            {
                                "type": "number",
                                "format": "double",
                                "nullable": true
                            },
                            {
                                "type": "string",
                                "nullable": true
                            },
                            {
                                "type": "string",
                                "format": "date-time",
                                "nullable": true
                            }
                        ],
                        "description": "The maximum value that properties of this type should be able to contain. Value type must match the type of the array item.",
                        "nullable": true
                    },
                    "minLength": {
                        "minimum": 0,
                        "type": "integer",
                        "description": "The minimum string length that list items of this type should be able to contain.",
                        "format": "int32",
                        "nullable": true
                    },
                    "maxLength": {
                        "minimum": 0,
                        "type": "integer",
                        "description": "The maximum string length that list items of this type should be able to contain.",
                        "format": "int32",
                        "nullable": true
                    },
                    "pattern": {
                        "type": "string",
                        "description": "Regular expression pattern that limits what strings that list items of this type should be able to contain.",
                        "format": "regex",
                        "nullable": true
                    },
                    "enum": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EnumerationValue"
                        },
                        "description": "A list of possible values that properties of this type should be able to contain.",
                        "nullable": true
                    },
                    "allowedTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies which content types and base types this property is allowed to contain."
                    },
                    "restrictedTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies which content types and base types this property cannot contain."
                    }
                },
                "additionalProperties": false,
                "description": "Describes the list item of a content type property of type 'array'."
            },
            "Changeset": {
                "required": [
                    "displayName"
                ],
                "type": "object",
                "properties": {
                    "key": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "The unique key of this Changeset."
                    },
                    "source": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "The source of this Changeset.",
                        "readOnly": true
                    },
                    "displayName": {
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string",
                        "description": "The name of this Changeset."
                    },
                    "created": {
                        "type": "string",
                        "description": "A timestamp indicating when this changeset was first created.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "The username of the user that created this changeset.",
                        "readOnly": true
                    },
                    "lastModified": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "additionalProperties": false,
                "description": "Changesets are used to group work on several content items together."
            },
            "ChangesetItem": {
                "required": [
                    "reference"
                ],
                "type": "object",
                "properties": {
                    "reference": {
                        "$ref": "#/components/schemas/ContentReference"
                    },
                    "category": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Gets/sets the changeset item category."
                    }
                },
                "additionalProperties": false,
                "description": "Items in an changeset that contains a link to the specific content version."
            },
            "ChangesetItemPage": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChangesetItem"
                        },
                        "description": "The items in this paged collection.",
                        "readOnly": true
                    },
                    "pageIndex": {
                        "type": "integer",
                        "description": "The zero-based index of the current page.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "The number of items in each page. Not necessarily the same as the number of items in this page.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "totalItemCount": {
                        "type": "integer",
                        "description": "The estimated total number of items in the collection. May be omitted if the total item count is unknown.",
                        "format": "int32",
                        "readOnly": true
                    }
                },
                "additionalProperties": false
            },
            "ChangesetPage": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Changeset"
                        },
                        "description": "The items in this paged collection.",
                        "readOnly": true
                    },
                    "pageIndex": {
                        "type": "integer",
                        "description": "The zero-based index of the current page.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "The number of items in each page. Not necessarily the same as the number of items in this page.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "totalItemCount": {
                        "type": "integer",
                        "description": "The estimated total number of items in the collection. May be omitted if the total item count is unknown.",
                        "format": "int32",
                        "readOnly": true
                    }
                },
                "additionalProperties": false
            },
            "ContentItem": {
                "required": [
                    "displayName"
                ],
                "type": "object",
                "properties": {
                    "properties": {
                        "type": "object",
                        "additionalProperties": {},
                        "description": "Properties as they are defined by corresponding component or content type."
                    },
                    "key": {
                        "type": "string",
                        "description": "The key that identifies this content item.",
                        "readOnly": true
                    },
                    "locale": {
                        "type": "string",
                        "description": "The locale of this content instance.",
                        "readOnly": true
                    },
                    "version": {
                        "type": "string",
                        "description": "The version identifier of this content instance.",
                        "readOnly": true
                    },
                    "variation": {
                        "maxLength": 255,
                        "minLength": 2,
                        "pattern": "^[A-Za-z][_0-9A-Za-z]+\\z",
                        "type": "string",
                        "description": "The variation of this content item, if any. Variations are used to represent different states or forms of the same content item.\r\nA variation has it's own publish lifecycle. A variation can though not be published before the default version of same local is published.",
                        "nullable": true,
                        "readOnly": true
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The content type of this content item.",
                        "readOnly": true
                    },
                    "displayName": {
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string",
                        "description": "The display name of this content item."
                    },
                    "published": {
                        "type": "string",
                        "description": "Indicates a time when this content was published or should be published.",
                        "format": "date-time",
                        "nullable": true
                    },
                    "expired": {
                        "type": "string",
                        "description": "Indicates a time when this content expired or should expire.",
                        "format": "date-time",
                        "nullable": true
                    },
                    "status": {
                        "enum": [
                            "draft",
                            "ready",
                            "published",
                            "previous",
                            "scheduled",
                            "rejected",
                            "inReview"
                        ],
                        "type": "string",
                        "description": "The status of this version of the content item."
                    },
                    "delayPublishUntil": {
                        "type": "string",
                        "description": "Indicates a time when this content version should transition to published status. Must only be assigned when Status is set to Scheduled.",
                        "format": "date-time",
                        "nullable": true
                    },
                    "container": {
                        "type": "string",
                        "description": "The key that identifies the container content that this content item belongs to.",
                        "nullable": true
                    },
                    "owner": {
                        "type": "string",
                        "description": "The key that identifies the owner of this content. Content that is own by another content is also known as an asset.",
                        "nullable": true
                    },
                    "routeSegment": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "A string that represents the segment that should be used when routing or generate routes to the current content instance.",
                        "nullable": true
                    },
                    "lastModified": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastModifiedBy": {
                        "type": "string",
                        "description": "The username of the user that made the latest modification to this content instance.",
                        "readOnly": true
                    }
                },
                "additionalProperties": false,
                "description": "Represents a version of a content item."
            },
            "ContentItemListWithContentTypes": {
                "type": "object",
                "properties": {
                    "contentTypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ContentType"
                        },
                        "description": "The content types that are used by the content items in the response.",
                        "readOnly": true
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ContentItem"
                        },
                        "description": "The content items in this paged collection.",
                        "readOnly": true
                    },
                    "pageIndex": {
                        "type": "integer",
                        "description": "The zero-based index of the current page.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "The number of item in each page. Not necessarily the same as the number of items in this page.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "totalItemCount": {
                        "type": "integer",
                        "description": "The estimated total number of items in the collection. May be omitted if the total item count is unknown.",
                        "format": "int32",
                        "readOnly": true
                    }
                },
                "additionalProperties": false,
                "description": "The response object for Page`1 when used ContentType are included."
            },
            "ContentItemPage": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ContentItem"
                        },
                        "description": "The items in this paged collection.",
                        "readOnly": true
                    },
                    "pageIndex": {
                        "type": "integer",
                        "description": "The zero-based index of the current page.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "The number of items in each page. Not necessarily the same as the number of items in this page.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "totalItemCount": {
                        "type": "integer",
                        "description": "The estimated total number of items in the collection. May be omitted if the total item count is unknown.",
                        "format": "int32",
                        "readOnly": true
                    }
                },
                "additionalProperties": false
            },
            "ContentItemWithContentTypes": {
                "type": "object",
                "properties": {
                    "contentTypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ContentType"
                        },
                        "description": "The content types that are used by the content item in the response.",
                        "readOnly": true
                    },
                    "item": {
                        "$ref": "#/components/schemas/ContentItem"
                    }
                },
                "additionalProperties": false,
                "description": "The response object for ContentItem when used ContentType are included."
            },
            "ContentLocaleInfo": {
                "type": "object",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the content.",
                        "readOnly": true
                    },
                    "created": {
                        "type": "string",
                        "description": "The date and time when the first locale version for the content was created.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "The username of the user that created this locale version of content.",
                        "readOnly": true
                    },
                    "status": {
                        "enum": [
                            "draft",
                            "published"
                        ],
                        "type": "string",
                        "description": "The status of the current locale.",
                        "readOnly": true
                    }
                },
                "additionalProperties": false,
                "description": "Describes information about a locale instance of a content item."
            },
            "ContentMetadata": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "The key that identifies this content."
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The content type of this content."
                    },
                    "locales": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ContentLocaleInfo"
                        },
                        "description": "Set of locales that this content has been created for.",
                        "readOnly": true
                    },
                    "container": {
                        "type": "string",
                        "description": "The key that identifies the container content that this content belongs to.",
                        "nullable": true
                    },
                    "hasItems": {
                        "type": "boolean",
                        "description": "Indicates if the content contains any content items.",
                        "readOnly": true
                    },
                    "owner": {
                        "type": "string",
                        "description": "The key that identifies the owner of this content. Content that is own by another content is also known as an asset.",
                        "nullable": true
                    },
                    "deleted": {
                        "type": "string",
                        "description": "A timestamp, which if provided, indicates when this content was deleted.",
                        "format": "date-time",
                        "nullable": true,
                        "readOnly": true
                    },
                    "deletedBy": {
                        "type": "string",
                        "description": "The username of the user that deleted this content.",
                        "nullable": true,
                        "readOnly": true
                    }
                },
                "additionalProperties": false,
                "description": "Represents metadata about a content item."
            },
            "ContentMetadataPage": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ContentMetadata"
                        },
                        "description": "The items in this paged collection.",
                        "readOnly": true
                    },
                    "pageIndex": {
                        "type": "integer",
                        "description": "The zero-based index of the current page.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "The number of items in each page. Not necessarily the same as the number of items in this page.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "totalItemCount": {
                        "type": "integer",
                        "description": "The estimated total number of items in the collection. May be omitted if the total item count is unknown.",
                        "format": "int32",
                        "readOnly": true
                    }
                },
                "additionalProperties": false
            },
            "ContentReference": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "The content key that identifies the content.",
                        "readOnly": true
                    },
                    "locale": {
                        "type": "string",
                        "description": "The name of the content locale",
                        "readOnly": true
                    },
                    "version": {
                        "type": "string",
                        "description": "The identifier of a specific version of the content.",
                        "readOnly": true
                    }
                },
                "additionalProperties": false,
                "description": "A reference to a specific content instance."
            },
            "ContentType": {
                "type": "object",
                "properties": {
                    "key": {
                        "maxLength": 255,
                        "minLength": 2,
                        "pattern": "^[A-Za-z][_0-9A-Za-z]+\\z",
                        "type": "string",
                        "description": "The key that identifies this ContentType."
                    },
                    "displayName": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "The display name of this ContentType."
                    },
                    "description": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "A description of this ContentType."
                    },
                    "baseType": {
                        "type": "string",
                        "description": "The base type of this ContentType.\r\nIgnored for contracts; required for all other content types.",
                        "nullable": true
                    },
                    "source": {
                        "type": "string",
                        "description": "A string that is used to indicate the source of this ContentType.",
                        "readOnly": true
                    },
                    "sortOrder": {
                        "type": "integer",
                        "description": "A value that is used to when sorting ContentType instances.",
                        "format": "int32"
                    },
                    "mayContainTypes": {
                        "type": "array",
                        "items": {
                            "maxLength": 255,
                            "minLength": 2,
                            "pattern": "^[_A-Za-z][:_0-9A-Za-z]+\\z",
                            "type": "string"
                        },
                        "description": "Provides a set of content types that can be created in containers of this type"
                    },
                    "mediaFileExtensions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Provides a set of media file extensions that this content type can handle."
                    },
                    "compositionBehaviors": {
                        "type": "array",
                        "items": {
                            "enum": [
                                "sectionEnabled",
                                "elementEnabled",
                                "formsElementEnabled"
                            ],
                            "type": "string",
                            "description": "Represent a Composition behavior for a ContentType."
                        },
                        "description": "Provides a set of composition behaviors specifying how this content type can be used within compositions."
                    },
                    "created": {
                        "type": "string",
                        "description": "A timestamp indicating when this ContentType was first created.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "lastModified": {
                        "type": "string",
                        "description": "Indicates the last time this content type was modified.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "lastModifiedBy": {
                        "type": "string",
                        "description": "The username of the user that made the latest modification to this ContentType.",
                        "readOnly": true
                    },
                    "properties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ContentTypeProperty"
                        },
                        "description": "Dictionary with all custom properties of this ContentType."
                    }
                },
                "additionalProperties": false,
                "description": "A writable implementation of an ContentType."
            },
            "ContentTypePage": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ContentType"
                        },
                        "description": "The items in this paged collection.",
                        "readOnly": true
                    },
                    "pageIndex": {
                        "type": "integer",
                        "description": "The zero-based index of the current page.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "The number of items in each page. Not necessarily the same as the number of items in this page.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "totalItemCount": {
                        "type": "integer",
                        "description": "The estimated total number of items in the collection. May be omitted if the total item count is unknown.",
                        "format": "int32",
                        "readOnly": true
                    }
                },
                "additionalProperties": false
            },
            "ContentTypeProperty": {
                "type": "object",
                "properties": {
                    "type": {
                        "maxLength": 50,
                        "enum": [
                            "string",
                            "url",
                            "boolean",
                            "integer",
                            "float",
                            "dateTime",
                            "contentReference",
                            "content",
                            "binary",
                            "link",
                            "richText",
                            "json",
                            "array",
                            "component"
                        ],
                        "type": "string",
                        "description": "Gets the data type for the property."
                    },
                    "format": {
                        "type": "string",
                        "description": "The key of the PropertyFormat that this ContentTypeProperty is an instance of.",
                        "nullable": true
                    },
                    "contentType": {
                        "maxLength": 255,
                        "minLength": 2,
                        "pattern": "^[_A-Za-z][:_0-9A-Za-z]+\\z",
                        "type": "string",
                        "description": "The key of the content type that a property with 'type': 'component' may contain.",
                        "nullable": true
                    },
                    "displayName": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "The display name of this ContentTypeProperty."
                    },
                    "description": {
                        "maxLength": 2000,
                        "type": "string",
                        "description": "A description of this ContentTypeProperty."
                    },
                    "localized": {
                        "type": "boolean",
                        "description": "Indicates if a property instance of this type should be localized for each locale\r\nor if values are shared between all locales."
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Indicates if a property instance of this type must always be assigned a value."
                    },
                    "group": {
                        "type": "string",
                        "description": "A reference to the PropertyGroup that this ContentTypeProperty is part of.\r\nIf this value is empty, a group may be assigned by the system."
                    },
                    "sortOrder": {
                        "type": "integer",
                        "description": "An value that is used to when sorting ContentTypeProperty instances.",
                        "format": "int32"
                    },
                    "indexingType": {
                        "enum": [
                            "disabled",
                            "queryable",
                            "searchable"
                        ],
                        "type": "string",
                        "description": "Indicates how should this property will be indexed in the search engine.\r\nIf this value is not explicitly set, the property will be indexed using default indexing setting of the search engine."
                    },
                    "minimum": {
                        "oneOf": [
                            {
                                "type": "integer",
                                "format": "int32",
                                "nullable": true
                            },
                            {
                                "type": "number",
                                "format": "double",
                                "nullable": true
                            },
                            {
                                "type": "string",
                                "nullable": true
                            },
                            {
                                "type": "string",
                                "format": "date-time",
                                "nullable": true
                            }
                        ],
                        "description": "The minimum value that properties of this type should be able to contain. Value type must match the type of the property.",
                        "nullable": true
                    },
                    "maximum": {
                        "oneOf": [
                            {
                                "type": "integer",
                                "format": "int32",
                                "nullable": true
                            },
                            {
                                "type": "number",
                                "format": "double",
                                "nullable": true
                            },
                            {
                                "type": "string",
                                "nullable": true
                            },
                            {
                                "type": "string",
                                "format": "date-time",
                                "nullable": true
                            }
                        ],
                        "description": "The minimum value that properties of this type should be able to contain. Value type must match the type of the property.",
                        "nullable": true
                    },
                    "enum": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EnumerationValue"
                        },
                        "description": "A list of possible values that properties of this type should be able to contain.",
                        "nullable": true
                    },
                    "imageDescriptor": {
                        "$ref": "#/components/schemas/ImageDescriptor"
                    },
                    "minLength": {
                        "minimum": 0,
                        "type": "integer",
                        "description": "The minimum string length that properties of this type should be able to contain.",
                        "format": "int32",
                        "nullable": true
                    },
                    "maxLength": {
                        "minimum": 0,
                        "type": "integer",
                        "description": "The maximum string length that properties of this type should be able to contain.",
                        "format": "int32",
                        "nullable": true
                    },
                    "pattern": {
                        "type": "string",
                        "description": "Regular expression pattern that limits what value that a string type property should be able to contain.",
                        "format": "regex",
                        "nullable": true
                    },
                    "minItems": {
                        "minimum": 0,
                        "type": "integer",
                        "description": "Optional minimum list length validation.",
                        "format": "int32",
                        "nullable": true
                    },
                    "maxItems": {
                        "minimum": 0,
                        "type": "integer",
                        "description": "Optional maximum list length validation.",
                        "format": "int32",
                        "nullable": true
                    },
                    "allowedTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies which content types and base types these property items are allowed to contain."
                    },
                    "restrictedTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies which content types and base types these property items cannot contain."
                    },
                    "items": {
                        "$ref": "#/components/schemas/ArrayItem"
                    }
                },
                "additionalProperties": false,
                "description": "Describes a property of a ContentType in the CMS."
            },
            "CopyContentOptions": {
                "type": "object",
                "properties": {
                    "allowDeleted": {
                        "type": "boolean",
                        "description": "Indicates if deleted content could be used as source."
                    },
                    "container": {
                        "type": "string",
                        "description": "Optional key of the container where the copied content should be placed.",
                        "nullable": true
                    },
                    "owner": {
                        "type": "string",
                        "description": "Optional key of the owner where the copied content should be placed.",
                        "nullable": true
                    },
                    "keepPublishedStatus": {
                        "type": "boolean",
                        "description": "Indicates if published versions of the content should keep their published status rather than being created as a draft version at the destination."
                    }
                },
                "additionalProperties": false,
                "description": "Options for copying content."
            },
            "DisplaySetting": {
                "required": [
                    "displayName"
                ],
                "type": "object",
                "properties": {
                    "displayName": {
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string",
                        "description": "The display name of this display setting."
                    },
                    "editor": {
                        "maxLength": 50,
                        "type": "string",
                        "description": "The suggested editor for this display setting."
                    },
                    "sortOrder": {
                        "type": "integer",
                        "description": "The sort order of this display setting within the template.",
                        "format": "int32"
                    },
                    "choices": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/DisplaySettingChoice"
                        },
                        "description": "The available choices for this display setting."
                    }
                },
                "additionalProperties": false,
                "description": "Describes a setting for a display template."
            },
            "DisplaySettingChoice": {
                "required": [
                    "displayName"
                ],
                "type": "object",
                "properties": {
                    "displayName": {
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string",
                        "description": "The display name of this display setting choice."
                    },
                    "sortOrder": {
                        "type": "integer",
                        "description": "The sort order of this choice within the setting.",
                        "format": "int32"
                    }
                },
                "additionalProperties": false,
                "description": "Describes a setting for a display template."
            },
            "DisplayTemplate": {
                "required": [
                    "displayName"
                ],
                "type": "object",
                "properties": {
                    "key": {
                        "maxLength": 255,
                        "minLength": 2,
                        "pattern": "^[A-Za-z][_0-9A-Za-z]+\\z",
                        "type": "string",
                        "description": "The key that identifies this display template."
                    },
                    "displayName": {
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string",
                        "description": "The display name of this display template."
                    },
                    "nodeType": {
                        "maxLength": 50,
                        "minLength": 2,
                        "pattern": "^[A-Za-z][_0-9A-Za-z]+\\z",
                        "type": "string",
                        "description": "The optional node type this display template is valid for.",
                        "nullable": true
                    },
                    "baseType": {
                        "type": "string",
                        "description": "The optional base type this display template is valid for.",
                        "nullable": true
                    },
                    "contentType": {
                        "maxLength": 255,
                        "minLength": 2,
                        "pattern": "^[A-Za-z][_0-9A-Za-z]+\\z",
                        "type": "string",
                        "description": "The optional key of the content type this display template is valid for.",
                        "nullable": true
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "If this is the default display template for the associated base type, node type or content type."
                    },
                    "created": {
                        "type": "string",
                        "description": "A timestamp indicating when this display template was first created.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "The username of the user that created this display template.",
                        "readOnly": true
                    },
                    "lastModified": {
                        "type": "string",
                        "description": "A timestamp indicating when this display template was last modified.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "lastModifiedBy": {
                        "type": "string",
                        "description": "The username of the user that last modified this display template.",
                        "readOnly": true
                    },
                    "settings": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/DisplaySetting"
                        },
                        "description": "The available settings for this display template."
                    }
                },
                "additionalProperties": false,
                "description": "Describes a display template that can be assigned to content."
            },
            "DisplayTemplatePage": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DisplayTemplate"
                        },
                        "description": "The items in this paged collection.",
                        "readOnly": true
                    },
                    "pageIndex": {
                        "type": "integer",
                        "description": "The zero-based index of the current page.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "The number of items in each page. Not necessarily the same as the number of items in this page.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "totalItemCount": {
                        "type": "integer",
                        "description": "The estimated total number of items in the collection. May be omitted if the total item count is unknown.",
                        "format": "int32",
                        "readOnly": true
                    }
                },
                "additionalProperties": false
            },
            "EnumerationValue": {
                "required": [
                    "displayName",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "value": {
                        "oneOf": [
                            {
                                "type": "integer",
                                "format": "int32",
                                "nullable": true
                            },
                            {
                                "type": "number",
                                "format": "double",
                                "nullable": true
                            },
                            {
                                "type": "string",
                                "nullable": true
                            },
                            {
                                "type": "string",
                                "format": "date-time",
                                "nullable": true
                            }
                        ],
                        "description": "The defined enumeration value. Value type must match the property type."
                    },
                    "displayName": {
                        "minLength": 1,
                        "type": "string",
                        "description": "The display name of the enumeration value."
                    }
                },
                "additionalProperties": false,
                "description": "Describes one value in an enumeration of possible values."
            },
            "ImageDescriptor": {
                "type": "object",
                "properties": {
                    "width": {
                        "minimum": 0,
                        "type": "integer",
                        "description": "The image width in pixels.",
                        "format": "int32"
                    },
                    "height": {
                        "minimum": 0,
                        "type": "integer",
                        "description": "The image height in pixels.",
                        "format": "int32"
                    },
                    "pregenerated": {
                        "type": "boolean",
                        "description": "Indicates if the image should be pre-generated when a new image is uploaded rather than when first requested."
                    }
                },
                "additionalProperties": false,
                "description": "Instruction for generating an alternative image from the main binary of an image content item."
            },
            "ProblemDetails": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "A URI reference that identifies the problem type.",
                        "format": "uri",
                        "nullable": true
                    },
                    "title": {
                        "type": "string",
                        "description": "A short, human-readable summary of the problem type.",
                        "nullable": true
                    },
                    "status": {
                        "maximum": 599,
                        "minimum": 100,
                        "type": "integer",
                        "description": "The HTTP status code generated by the origin server for this occurrence of the problem.",
                        "format": "int32",
                        "nullable": true
                    },
                    "detail": {
                        "type": "string",
                        "description": "A human-readable explanation specific to this occurrence of the problem.",
                        "nullable": true
                    },
                    "instance": {
                        "type": "string",
                        "description": "A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.",
                        "format": "uri",
                        "nullable": true
                    },
                    "code": {
                        "type": "string",
                        "description": "Error code that identifies the problem type.",
                        "nullable": true
                    },
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "detail": {
                                    "type": "string",
                                    "description": "A granular explanation of one specific error related to a field, header or query parameter."
                                },
                                "field": {
                                    "type": "string",
                                    "description": "A string that may provide a hint to which field that was the source of the error.",
                                    "nullable": true,
                                    "example": "properties.header.displayName"
                                }
                            }
                        },
                        "description": "An array of error details with more detailed information about the problem.",
                        "nullable": true
                    }
                },
                "additionalProperties": {}
            },
            "PropertyFormat": {
                "type": "object",
                "properties": {
                    "key": {
                        "maxLength": 255,
                        "minLength": 2,
                        "pattern": "^[A-Za-z][_0-9A-Za-z]+\\z",
                        "type": "string",
                        "description": "The key that identifies this PropertyFormat."
                    },
                    "dataType": {
                        "enum": [
                            "string",
                            "url",
                            "boolean",
                            "integer",
                            "float",
                            "dateTime",
                            "contentReference",
                            "content",
                            "binary",
                            "link",
                            "richText",
                            "json",
                            "array",
                            "component"
                        ],
                        "type": "string",
                        "description": "The underlying data type used for this PropertyFormat."
                    },
                    "itemType": {
                        "enum": [
                            "string",
                            "url",
                            "boolean",
                            "integer",
                            "float",
                            "dateTime",
                            "contentReference",
                            "content",
                            "binary",
                            "link",
                            "richText",
                            "json",
                            "array",
                            "component"
                        ],
                        "type": "string",
                        "description": "The underlying item type used for this PropertyFormat."
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name and identifier of this PropertyFormat."
                    },
                    "deleted": {
                        "type": "boolean",
                        "description": "Indicates if this property format has been deleted.",
                        "readOnly": true
                    },
                    "created": {
                        "type": "string",
                        "description": "A timestamp indicating when this display template was first created.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "The username of the user that created this display template.",
                        "readOnly": true
                    },
                    "lastModified": {
                        "type": "string",
                        "description": "A timestamp indicating when this display template was last modified.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "lastModifiedBy": {
                        "type": "string",
                        "description": "The username of the user that last modified this display template.",
                        "readOnly": true
                    }
                },
                "additionalProperties": false,
                "description": "Represent the definition of semantic property formats for content items."
            },
            "PropertyFormatPage": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PropertyFormat"
                        },
                        "description": "The items in this paged collection.",
                        "readOnly": true
                    },
                    "pageIndex": {
                        "type": "integer",
                        "description": "The zero-based index of the current page.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "The number of items in each page. Not necessarily the same as the number of items in this page.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "totalItemCount": {
                        "type": "integer",
                        "description": "The estimated total number of items in the collection. May be omitted if the total item count is unknown.",
                        "format": "int32",
                        "readOnly": true
                    }
                },
                "additionalProperties": false
            },
            "PropertyGroup": {
                "type": "object",
                "properties": {
                    "key": {
                        "maxLength": 255,
                        "minLength": 2,
                        "pattern": "^[A-Za-z][_0-9A-Za-z]+\\z",
                        "type": "string",
                        "description": "The key that identifies this PropertyGroup."
                    },
                    "displayName": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "The display name of this PropertyGroup."
                    },
                    "source": {
                        "type": "string",
                        "description": "A string that is used to indicate the source of this PropertyGroup.",
                        "readOnly": true
                    },
                    "sortOrder": {
                        "type": "integer",
                        "description": "An value that is used to when sorting PropertyGroup instances.",
                        "format": "int32"
                    },
                    "created": {
                        "type": "string",
                        "description": "A timestamp indicating when this property group was first created.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "The username of the user that created this property group.",
                        "readOnly": true
                    },
                    "lastModified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "lastModifiedBy": {
                        "type": "string",
                        "description": "The username of the user that last modified this property group.",
                        "readOnly": true
                    }
                },
                "additionalProperties": false,
                "description": "Describes a property group of a ContentType in the CMS."
            },
            "PropertyGroupPage": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PropertyGroup"
                        },
                        "description": "The items in this paged collection.",
                        "readOnly": true
                    },
                    "pageIndex": {
                        "type": "integer",
                        "description": "The zero-based index of the current page.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "The number of items in each page. Not necessarily the same as the number of items in this page.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "totalItemCount": {
                        "type": "integer",
                        "description": "The estimated total number of items in the collection. May be omitted if the total item count is unknown.",
                        "format": "int32",
                        "readOnly": true
                    }
                },
                "additionalProperties": false
            }
        },
        "securitySchemes": {
            "apiAuth": {
                "type": "oauth2",
                "description": "Use this scheme to generate an access token that can be used to access the API.",
                "flows": {
                    "clientCredentials": {
                        "tokenUrl": "https://api.cms.optimizely.com/oauth/token",
                        "scopes": {
                            "api:admin": "Grants full administrative access to the API"
                        }
                    }
                }
            },
            "token": {
                "type": "http",
                "description": "Include the token retrieved using the `apiAuth` scheme with your API requests using this scheme.",
                "scheme": "bearer",
                "bearerFormat": "jwt"
            }
        }
    },
    "security": [
        {
            "apiAuth": [
                "api:admin"
            ]
        }
    ],
    "x-readme": {
        "explorer-enabled": true,
        "proxy-enabled": true
    }
}