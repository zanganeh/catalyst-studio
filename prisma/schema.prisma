generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Website {
  id           String        @id @default(cuid())
  name         String
  description  String?
  category     String
  metadata     String?
  icon         String?
  settings     String?
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  aiContexts   AIContext[]
  contentItems ContentItem[]
  contentTypes ContentType[]
}

model ContentType {
  id           String        @id @default(cuid())
  websiteId    String
  name         String
  fields       String
  settings     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  contentItems ContentItem[]
  website      Website       @relation(fields: [websiteId], references: [id], onDelete: Cascade)
}

model ContentItem {
  id            String      @id @default(cuid())
  contentTypeId String
  websiteId     String
  data          String
  status        String      @default("draft")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  metadata      String?
  publishedAt   DateTime?
  slug          String?
  website       Website     @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  contentType   ContentType @relation(fields: [contentTypeId], references: [id], onDelete: Cascade)

  @@index([websiteId, contentTypeId])
  @@index([slug])
  @@index([status, publishedAt])
}

model AIContext {
  id        String   @id @default(cuid())
  websiteId String
  sessionId String
  messages  String
  metadata  String?
  summary   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  website   Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@unique([websiteId, sessionId])
  @@index([websiteId, sessionId])
}

model Deployment {
  id            String    @id @default(cuid())
  websiteId     String
  providerId    String
  providerName  String
  selectedTypes String
  status        String    @default("pending")
  progress      Int       @default(0)
  logs          String    @default("[]")
  error         String?
  startedAt     DateTime  @default(now())
  completedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([websiteId])
  @@index([status])
  @@index([startedAt])
}

model ContentTypeVersion {
  id              Int      @id @default(autoincrement())
  typeKey         String   @map("type_key")
  versionHash     String   @unique @map("version_hash")
  parentHash      String?  @map("parent_hash")
  contentSnapshot String   @map("content_snapshot")
  changeSource    String   @map("change_source")
  author          String?
  createdAt       DateTime @default(now()) @map("created_at")
  message         String?

  @@index([typeKey, createdAt], name: "idx_type_versions")
  @@index([versionHash], name: "idx_version_hash")
  @@map("content_type_versions")
}
