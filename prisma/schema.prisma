generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Website {
  id             String          @id @default(cuid())
  name           String
  description    String?
  category       String
  metadata       Json?
  icon           String?
  settings       Json?
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  aiContexts     AIContext[]
  contentTypes   ContentType[]
  contentItems   ContentItem[]
  deployments    Deployment[]
  siteStructures SiteStructure[]
  redirects      Redirect[]
}

enum ContentTypeCategory {
  page
  component
}

model ContentType {
  id               String               @id @default(cuid())
  key              String
  name             String
  pluralName       String
  displayField     String?
  category         ContentTypeCategory  @default(page)
  fields           Json
  websiteId        String
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  contentItems     ContentItem[]
  website          Website              @relation(fields: [websiteId], references: [id])
  versions         ContentTypeVersion[]

  @@unique([websiteId, key])
  @@index([websiteId])
  @@index([category])
}



model ContentItem {
  id             String           @id @default(cuid())
  contentTypeId  String
  contentType    ContentType      @relation(fields: [contentTypeId], references: [id], onDelete: Cascade)
  websiteId      String
  website        Website          @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  title          String
  slug           String
  status         String           @default("draft")
  content        Json
  metadata       Json?
  publishedAt    DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  siteStructures SiteStructure[]

  @@unique([websiteId, slug])
  @@index([websiteId])
  @@index([contentTypeId])
  @@index([status])
  @@index([publishedAt])
}

model Deployment {
  id             String    @id @default(cuid())
  websiteId      String
  provider       String
  status         String
  deploymentData Json?
  errorMessage   String?
  deployedAt     DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  website        Website   @relation(fields: [websiteId], references: [id])

  @@index([websiteId])
  @@index([provider])
  @@index([status])
}

model ContentTypeVersion {
  id            String      @id @default(cuid())
  contentTypeId String
  typeKey       String
  version       Int
  hash          String      @unique
  data          Json
  parentHash    String?
  createdAt     DateTime    @default(now())
  contentType   ContentType @relation(fields: [contentTypeId], references: [id])

  @@unique([typeKey, version])
  @@index([contentTypeId])
  @@index([typeKey])
  @@index([parentHash])
}

model SyncHistory {
  id           String    @id @default(cuid())
  websiteId    String
  syncType     String
  sourceSystem String
  targetSystem String
  syncData     Json
  status       String
  errorMessage String?
  startedAt    DateTime
  completedAt  DateTime?
  createdAt    DateTime  @default(now())

  @@index([websiteId])
  @@index([syncType])
  @@index([status])
  @@index([startedAt])
}

model SyncState {
  id             String    @id @default(cuid())
  typeKey        String    @unique
  localHash      String?
  remoteHash     String?
  lastSyncAt     DateTime?
  syncStatus     String?   @default("pending")
  conflictStatus String?
  lastConflictAt DateTime?
  metadata       Json?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastSyncedHash String?
  syncProgress   Json?

  @@index([syncStatus])
  @@index([lastSyncAt])
  @@index([conflictStatus])
}

model ConflictLog {
  id              String    @id @default(cuid())
  typeKey         String
  localHash       String
  remoteHash      String
  ancestorHash    String?
  conflictType    String
  conflictDetails Json
  resolution      String?
  resolvedBy      String?
  resolvedAt      DateTime?
  createdAt       DateTime  @default(now())

  @@index([typeKey, createdAt])
  @@index([resolution])
}

model AIContext {
  id        String   @id @default(cuid())
  websiteId String
  sessionId String   @default("default")
  context   Json
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  website   Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@unique([websiteId, sessionId])
  @@index([websiteId])
}

model SiteStructure {
  id            String   @id @default(cuid())
  websiteId     String
  contentItemId String?
  parentId      String?
  slug          String   @db.VarChar(255)
  fullPath      String   @db.Text
  pathDepth     Int      @default(0)
  position      Int      @default(0)
  weight        Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  website      Website      @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  contentItem  ContentItem? @relation(fields: [contentItemId], references: [id], onDelete: SetNull)
  parent       SiteStructure?  @relation("SiteStructureHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children     SiteStructure[] @relation("SiteStructureHierarchy")

  @@unique([parentId, slug])
  @@index([fullPath])
  @@index([parentId])
  @@index([websiteId])
  @@index([pathDepth])
  @@index([contentItemId])
  @@index([websiteId, fullPath]) // Composite index for faster URL resolution per website
}

model Redirect {
  id           String   @id @default(uuid())
  websiteId    String   @map("website_id")
  sourcePath   String   @map("source_path")
  targetPath   String   @map("target_path")
  redirectType Int      @map("redirect_type") // 301 or 302
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  website      Website  @relation(fields: [websiteId], references: [id])
  
  @@unique([websiteId, sourcePath])
  @@index([sourcePath])
  @@index([websiteId, isActive])
  @@map("redirects")
}
