generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Website {
  id           String        @id @default(cuid())
  name         String
  description  String?
  category     String
  metadata     String?
  icon         String?
  settings     String?
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  aiContexts   AIContext[]
  contentItems ContentItem[]
  contentTypes ContentType[]
}

model ContentType {
  id           String        @id @default(cuid())
  websiteId    String
  name         String
  fields       String
  settings     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  contentItems ContentItem[]
  website      Website       @relation(fields: [websiteId], references: [id], onDelete: Cascade)
}

model ContentItem {
  id            String      @id @default(cuid())
  contentTypeId String
  websiteId     String
  data          String
  status        String      @default("draft")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  metadata      String?
  publishedAt   DateTime?
  slug          String?
  website       Website     @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  contentType   ContentType @relation(fields: [contentTypeId], references: [id], onDelete: Cascade)

  @@index([websiteId, contentTypeId])
  @@index([slug])
  @@index([status, publishedAt])
}

model AIContext {
  id        String   @id @default(cuid())
  websiteId String
  sessionId String
  messages  String
  metadata  String?
  summary   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  website   Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@unique([websiteId, sessionId])
  @@index([websiteId, sessionId])
}

model Deployment {
  id            String    @id @default(cuid())
  websiteId     String
  providerId    String
  providerName  String
  selectedTypes String
  status        String    @default("pending")
  progress      Int       @default(0)
  logs          String    @default("[]")
  error         String?
  startedAt     DateTime  @default(now())
  completedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  syncHistory   SyncHistory[]

  @@index([websiteId])
  @@index([status])
  @@index([startedAt])
}

model ContentTypeVersion {
  id              Int      @id @default(autoincrement())
  typeKey         String   @map("type_key")
  versionHash     String   @unique @map("version_hash")
  parentHash      String?  @map("parent_hash")
  contentSnapshot String   @map("content_snapshot")
  changeSource    String   @map("change_source")
  author          String?
  createdAt       DateTime @default(now()) @map("created_at")
  message         String?

  // Relations for multi-parent support
  parentVersions  VersionParent[] @relation("VersionToParents")
  childVersions   VersionParent[] @relation("ParentToVersions")
  
  // Sync history relation
  syncHistory     SyncHistory[]

  @@index([typeKey, createdAt], name: "idx_type_versions")
  @@index([versionHash], name: "idx_version_hash")
  @@map("content_type_versions")
}

model VersionParent {
  versionHash  String @map("version_hash")
  parentHash   String @map("parent_hash")
  parentOrder  Int    @default(0) @map("parent_order")
  
  // Relations
  version ContentTypeVersion @relation("VersionToParents", fields: [versionHash], references: [versionHash])
  parent  ContentTypeVersion @relation("ParentToVersions", fields: [parentHash], references: [versionHash])
  
  @@id([versionHash, parentHash])
  @@index([versionHash])
  @@index([parentHash])
  @@map("version_parents")
}

model SyncHistory {
  id              String   @id @default(cuid())
  typeKey         String   @map("type_key")
  versionHash     String   @map("version_hash")
  targetPlatform  String   @map("target_platform")
  syncDirection   String   @map("sync_direction")
  syncStatus      String   @map("sync_status")
  pushedData      String   @map("pushed_data")
  responseData    String?  @map("response_data")
  errorMessage    String?  @map("error_message")
  retryCount      Int      @default(0) @map("retry_count")
  syncMetadata    String?  @map("sync_metadata")
  deploymentId    String?  @map("deployment_id")
  startedAt       DateTime @map("started_at")
  completedAt     DateTime? @map("completed_at")
  createdAt       DateTime @default(now()) @map("created_at")
  
  // Relations
  version    ContentTypeVersion? @relation(fields: [versionHash], references: [versionHash])
  deployment Deployment?         @relation(fields: [deploymentId], references: [id])
  
  @@index([typeKey, createdAt])
  @@index([versionHash])
  @@index([targetPlatform])
  @@index([syncStatus])
  @@index([deploymentId])
  @@map("sync_history")
}

model SyncState {
  typeKey         String   @id @map("type_key")
  localHash       String   @map("local_hash")
  remoteHash      String?  @map("remote_hash")
  lastSyncedHash  String?  @map("last_synced_hash")
  syncStatus      String   @map("sync_status") // new/modified/conflict/in_sync
  lastSyncAt      DateTime? @map("last_sync_at")
  lastCheckedAt   DateTime @map("last_checked_at")
  changeSource    String?  @map("change_source") // UI/AI/SYNC
  conflictStatus  String?  @map("conflict_status") // none/detected/resolved
  lastConflictAt  DateTime? @map("last_conflict_at")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  @@map("sync_state")
}

model ConflictLog {
  id              String   @id @default(cuid())
  typeKey         String   @map("type_key")
  localHash       String   @map("local_hash")
  remoteHash      String   @map("remote_hash")
  ancestorHash    String?  @map("ancestor_hash")
  conflictType    String   @map("conflict_type") // field/structural/delete
  conflictDetails Json     @map("conflict_details")
  resolution      String?  @map("resolution") // local_wins/remote_wins/merged/pending
  resolvedBy      String?  @map("resolved_by")
  resolvedAt      DateTime? @map("resolved_at")
  createdAt       DateTime @default(now()) @map("created_at")
  
  @@map("conflict_log")
  @@index([typeKey, createdAt])
}
