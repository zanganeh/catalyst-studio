generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Website {
  id           String        @id @default(cuid())
  name         String
  description  String?
  category     String
  metadata     Json?         // PostgreSQL native JSON type
  icon         String?
  settings     Json?         // PostgreSQL native JSON type
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  aiContexts   AIContext[]
  contentTypes ContentType[]
  contentItems ContentItem[]
  deployments  Deployment[]
}

model ContentType {
  id               String                   @id @default(cuid())
  key              String
  name             String
  pluralName       String
  displayField     String?
  schema           Json                     // PostgreSQL native JSON
  fields           Json                     // PostgreSQL native JSON
  websiteId        String
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  contentItems     ContentItem[]
  website          Website                  @relation(fields: [websiteId], references: [id])
  versions         ContentTypeVersion[]
  fields_metadata  FieldMetadata[]
  
  @@unique([websiteId, key])
  @@index([websiteId])
}

model FieldMetadata {
  id                   String               @id @default(cuid())
  websiteId            String
  contentTypeId        String
  fieldName            String
  fieldType            String
  metadata             Json?                // PostgreSQL native JSON
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  contentType          ContentType          @relation(fields: [contentTypeId], references: [id])
  fieldRelationships   FieldRelationship[]  @relation("SourceField")
  targetRelationships  FieldRelationship[]  @relation("TargetField")
  
  @@unique([contentTypeId, fieldName])
  @@index([websiteId])
  @@index([contentTypeId])
}

model FieldRelationship {
  id              String         @id @default(cuid())
  websiteId       String
  sourceFieldId   String
  targetFieldId   String
  relationshipType String
  metadata        Json?          // PostgreSQL native JSON
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  sourceField     FieldMetadata  @relation("SourceField", fields: [sourceFieldId], references: [id])
  targetField     FieldMetadata  @relation("TargetField", fields: [targetFieldId], references: [id])
  
  @@unique([sourceFieldId, targetFieldId])
  @@index([websiteId])
  @@index([sourceFieldId])
  @@index([targetFieldId])
}


model ContentItem {
  id            String      @id @default(cuid())
  contentTypeId String
  contentType   ContentType @relation(fields: [contentTypeId], references: [id], onDelete: Cascade)
  websiteId     String
  website       Website     @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  title         String
  slug          String
  status        String      @default("draft")
  content       Json        // PostgreSQL native JSON
  metadata      Json?       // PostgreSQL native JSON
  publishedAt   DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([websiteId, slug])
  @@index([websiteId])
  @@index([contentTypeId])
  @@index([status])
  @@index([publishedAt])
}

model Deployment {
  id               String   @id @default(cuid())
  websiteId        String
  provider         String
  status           String
  deploymentData   Json?    // PostgreSQL native JSON
  errorMessage     String?  @db.Text
  deployedAt       DateTime?
  website          Website  @relation(fields: [websiteId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@index([websiteId])
  @@index([provider])
  @@index([status])
}

// Epic 6 Models
model ContentTypeVersion {
  id              String       @id @default(cuid())
  contentTypeId   String
  typeKey         String
  version         Int
  hash            String
  data            Json         // PostgreSQL native JSON
  parentHash      String?
  createdAt       DateTime     @default(now())
  contentType     ContentType  @relation(fields: [contentTypeId], references: [id])
  
  @@unique([typeKey, version])
  @@unique([hash])
  @@index([contentTypeId])
  @@index([typeKey])
  @@index([parentHash])
}

model SyncHistory {
  id              String   @id @default(cuid())
  websiteId       String
  syncType        String
  sourceSystem    String
  targetSystem    String
  syncData        Json     // PostgreSQL native JSON
  status          String
  errorMessage    String?  @db.Text
  startedAt       DateTime
  completedAt     DateTime?
  createdAt       DateTime @default(now())
  
  @@index([websiteId])
  @@index([syncType])
  @@index([status])
  @@index([startedAt])
}

model SyncState {
  id              String    @id @default(cuid())
  typeKey         String    @unique
  localHash       String?
  remoteHash      String?
  lastSyncAt      DateTime?
  syncStatus      String?   @default("pending")
  conflictStatus  String?
  lastConflictAt  DateTime?
  metadata        Json?     // PostgreSQL native JSON
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastSyncedHash  String?
  syncProgress    Json?     // PostgreSQL native JSON
  
  @@index([syncStatus])
  @@index([lastSyncAt])
  @@index([conflictStatus])
}

model ConflictLog {
  id              String    @id @default(cuid())
  typeKey         String
  localHash       String
  remoteHash      String
  ancestorHash    String?
  conflictType    String
  conflictDetails Json      // PostgreSQL native JSON
  resolution      String?
  resolvedBy      String?
  resolvedAt      DateTime?
  createdAt       DateTime  @default(now())
  
  @@index([typeKey, createdAt])
  @@index([resolution])
}

model AIContext {
  id        String   @id @default(cuid())
  websiteId String
  sessionId String   @default("default")
  context   Json     // PostgreSQL native JSON
  metadata  Json?    // PostgreSQL native JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  website   Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@unique([websiteId, sessionId])
  @@index([websiteId])
}