'use client';

import React, { useState, useEffect, useRef } from 'react';
import { Bot, User, Send, Loader2, RefreshCw } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { 
  useAIContext, 
  useCreateAIContext, 
  useAppendMessage, 
  useClearContext 
} from '@/lib/api/hooks/use-ai-context';
import { AIMessage } from '@/types/ai-context';

interface AIContextChatProps {
  websiteId: string;
  sessionId?: string;
  className?: string;
}

export function AIContextChat({ 
  websiteId, 
  sessionId: providedSessionId, 
  className 
}: AIContextChatProps) {
  const [input, setInput] = useState('');
  const [sessionId, setSessionId] = useState(providedSessionId || '');
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  
  // Initialize session ID if not provided
  useEffect(() => {
    if (!sessionId) {
      setSessionId(`session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    }
  }, [sessionId]);
  
  // Queries and mutations
  const { data: contextData, isLoading: isLoadingContext } = useAIContext(websiteId, sessionId);
  const createContext = useCreateAIContext();
  const appendMessage = useAppendMessage(websiteId, sessionId);
  const clearContext = useClearContext(websiteId, sessionId);
  
  const messages = contextData?.messages || [];
  const isLoading = isLoadingContext || appendMessage.isPending || createContext.isPending;
  
  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    if (scrollAreaRef.current) {
      const scrollContainer = scrollAreaRef.current.querySelector('[data-radix-scroll-area-viewport]');
      if (scrollContainer) {
        scrollContainer.scrollTop = scrollContainer.scrollHeight;
      }
    }
  }, [messages]);
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!input.trim() || isLoading) return;
    
    const userMessage: AIMessage = {
      role: 'user',
      content: input.trim(),
      timestamp: new Date(),
    };
    
    setInput('');
    
    try {
      // Create context if it doesn't exist
      if (!contextData) {
        await createContext.mutateAsync({
          websiteId,
          sessionId,
          initialMessage: userMessage,
        });
      } else {
        // Append message to existing context
        await appendMessage.mutateAsync({
          message: userMessage,
          pruneIfNeeded: true,
        });
      }
      
      // Here you would typically call your AI service
      // For now, we'll just add a mock response
      setTimeout(async () => {
        const assistantMessage: AIMessage = {
          role: 'assistant',
          content: 'This is a mock response. In production, this would be generated by your AI service.',
          timestamp: new Date(),
          metadata: {
            model: 'gpt-3.5-turbo',
            tokens: 50,
          },
        };
        
        await appendMessage.mutateAsync({
          message: assistantMessage,
          pruneIfNeeded: true,
        });
      }, 1000);
      
    } catch (error) {
      console.error('Failed to send message:', error);
    }
  };
  
  const handleClear = async () => {
    try {
      await clearContext.mutateAsync();
    } catch (error) {
      console.error('Failed to clear context:', error);
    }
  };
  
  return (
    <div className={`flex flex-col h-full bg-gray-900 ${className || ''}`}>
      {/* Header */}
      <div className="px-4 py-4 border-b border-gray-700">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <Bot className="h-5 w-5 text-catalyst-orange" />
            <h3 className="text-white font-semibold">AI Context Chat</h3>
          </div>
          <Button
            variant="ghost"
            size="sm"
            onClick={handleClear}
            disabled={isLoading || messages.length === 0}
            className="text-gray-400 hover:text-white"
          >
            <RefreshCw className="h-4 w-4" />
          </Button>
        </div>
        <p className="text-gray-400 text-sm mt-1">
          Session: {sessionId.slice(0, 8)}...
        </p>
      </div>
      
      {/* Messages */}
      <ScrollArea className="flex-1 px-4 py-4" ref={scrollAreaRef}>
        <div className="space-y-4">
          {messages.length === 0 && (
            <div className="text-center text-gray-500 py-8">
              Start a conversation by typing a message below
            </div>
          )}
          
          {messages.map((message, index) => (
            <div
              key={index}
              className={`flex gap-3 ${
                message.role === 'user' ? 'justify-end' : 'justify-start'
              }`}
            >
              <div
                className={`flex gap-3 max-w-[70%] ${
                  message.role === 'user' ? 'flex-row-reverse' : 'flex-row'
                }`}
              >
                <div className="flex-shrink-0">
                  {message.role === 'user' ? (
                    <div className="h-8 w-8 rounded-full bg-catalyst-orange flex items-center justify-center">
                      <User className="h-4 w-4 text-white" />
                    </div>
                  ) : (
                    <div className="h-8 w-8 rounded-full bg-gray-700 flex items-center justify-center">
                      <Bot className="h-4 w-4 text-catalyst-orange" />
                    </div>
                  )}
                </div>
                <div
                  className={`px-4 py-2 rounded-lg ${
                    message.role === 'user'
                      ? 'bg-catalyst-orange text-white'
                      : 'bg-gray-800 text-gray-100'
                  }`}
                >
                  <p className="text-sm whitespace-pre-wrap">{message.content}</p>
                  {message.metadata && (
                    <div className="mt-2 text-xs opacity-70">
                      {message.metadata.model && `Model: ${message.metadata.model}`}
                      {message.metadata.tokens && ` â€¢ Tokens: ${message.metadata.tokens}`}
                    </div>
                  )}
                </div>
              </div>
            </div>
          ))}
          
          {isLoading && (
            <div className="flex justify-start gap-3">
              <div className="h-8 w-8 rounded-full bg-gray-700 flex items-center justify-center">
                <Bot className="h-4 w-4 text-catalyst-orange" />
              </div>
              <div className="px-4 py-2 rounded-lg bg-gray-800">
                <Loader2 className="h-4 w-4 text-gray-400 animate-spin" />
              </div>
            </div>
          )}
        </div>
      </ScrollArea>
      
      {/* Input */}
      <form onSubmit={handleSubmit} className="p-4 border-t border-gray-700">
        <div className="flex gap-2">
          <Input
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder="Type your message..."
            disabled={isLoading}
            className="flex-1 bg-gray-800 border-gray-700 text-white placeholder-gray-500"
          />
          <Button
            type="submit"
            disabled={!input.trim() || isLoading}
            className="bg-catalyst-orange hover:bg-catalyst-orange/90"
          >
            {isLoading ? (
              <Loader2 className="h-4 w-4 animate-spin" />
            ) : (
              <Send className="h-4 w-4" />
            )}
          </Button>
        </div>
      </form>
    </div>
  );
}