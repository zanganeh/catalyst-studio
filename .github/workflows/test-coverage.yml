name: Test Coverage

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  coverage:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    # No services needed for SQLite

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npm run db:generate

    - name: Setup test database
      run: npm run test:db:setup
      env:
        DATABASE_URL: file:./test.db

    - name: Run tests with coverage
      run: npm run test:coverage:ci
      env:
        NODE_ENV: test
        DATABASE_URL: file:./test.db

    - name: Run coverage analysis
      run: npm run test:coverage:analyze

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: romeovs/lcov-reporter-action@v0.3.1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        lcov-file: ./coverage/lcov.info
        delete-old-comments: true

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report-${{ matrix.node-version }}
        path: |
          coverage/
          !coverage/tmp
        retention-days: 30

    - name: Check coverage thresholds
      run: npm run test:coverage:check

  performance:
    runs-on: ubuntu-latest
    needs: coverage
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npm run db:generate

    - name: Setup test database
      run: npm run test:db:setup
      env:
        DATABASE_URL: file:./test.db

    - name: Run performance tests
      run: npm run test:performance
      env:
        NODE_ENV: test
        DATABASE_URL: file:./test.db

    - name: Benchmark test execution time
      run: |
        echo "Running test performance benchmark..."
        time npm run test:unit
        time npm run test:integration